################################################################################
######################## StoredComponentRegistry ###############################
################################################################################
Note: All code in this Component develeopment template is sudo code, and is meant
to serve as a guide, actual implementation will be different.
################################################################################

------------------------------------------------------------------------------------------------------------------------------------------------

##########
Properties
##########

###############################
private $acceptedImplementation
###############################

testAcceptedImplementationPropertyIsAssingedNamespaceOfADefinedInterfacePostInstantiation(): void
-- Tests that the interface namespace assigned to acceptedImplementation property on instantiation
   is a defined interface.

   Note: use php method interface_exists(), NOT class_exists(), need to insure namespace
   specifically references an interface.

   Hint: assertTrue(interface_exists($storedComponentRegistry->export()['acceptedImplementation']))

testAcceptedImplementationPropertyIsAssignedNamespaceOfADefinedComponentImplmenationPostInstantiation(): void
-- Tests that the interface namespace assigned to acceptedImplementation property on instantiation
   is literally DCMS\interfaces\component\Component. or implements DCMS\interfaces\component\Compponent

   Hint:
     assertTrue(
       $storedComponentRegistry->export()['acceptedImplementation'] === 'DarlingCms\interfaces\component\Component'
       ||
       in_array('DarlingCms\interfaces\component\Component', class_implements($storedComponentRegistry->export()['acceptedImplementation']))
    );

######################
private $componentCrud
######################

testComponentCrudPropertyIsAssignedAnInstanceOfAComponentCrudImplementationPostInstantiation(): void
-- Tests that the componentCrud property is assigned an instance of a DarlingCms\interfaces\component\Crud\ComponentCrud
   implementation on instnatiation.

   Hint: assertTrue(
             in_array(
                 "DarlingCms\interfaces\component\Crud\ComponentCrud"
                 class_implements($storedComponentRegistry->export()['componentCrud'])
             )
         )

#################
private $registry
#################

testRegistryPropertyIsSetToAnEmptyArrayPostInstantiation(): void
-- As the tests name implies, assertEquals([], $storedComponentRegistry->export()['registry'])

   Hint: Dont be fancy, just use: assertEquals([], $storedComponentRegistry->export()['registry'])

------------------------------------------------------------------------------------------------------------------------------------------------

#######
Methods
#######

##################################
getAcceptedImplementation(): string
##################################

testGetAcceptedImplementationReturnsSameNamespaceAssignedToAcceptedImplementationPropertyOnInstantiation(): void
-- Tests that the namespace returned by getAcceptedImplementation() is identical to the namespace assigned to
   the acceptedImplementation property on instantiation.

   Hint: assert_equals($storedComponentRegistry->export()['acceptedImplementation'], $storedComponentRegistry->getAcceptedImplementation())


#################################
getComponentCrud(): ComponentCrud
#################################

testGetComponentCrudReturnsSameComponentCrudImplementationInstanceAssignedToComponentCrudPropertyOnInstantiation(): void
-- Tests that the ComponentCrud implementation returned by getComponentCrud() is identical to the ComponentCrud
   implementation assigned to the componentCrud property on instantiation.

   Hint: assertEquals($storedComponentRegistry->export()['componentCrud'], $storedComponentRegistry->getComponentCrud())









registerComponent(Component $component): bool

unRegisterComponent(Storable): bool

getRegisteredComponents(): array

getRegistry(): array







e.g.

the ComponentInstaller will use a SCR to track what comps it insalls

sudo code:

install(); bool
{
    foreach(componentsToInstall as component)
    {
        if(Crud->create(component) === true)
        {
            $staus = $this->storedComponentRegistry()->registerComponent(component)
        }
    }
    return ($status === true) && $this->componentCrud->registerComponent($this->storedComponentRegistry);
}
