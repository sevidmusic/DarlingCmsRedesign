#!/bin/bash
# APP_NAME | Requests.sh

set -o posix

# This file was generated by dsh.

# Use this file to define the Requests for the App.
# Only Requests should be defined in this file.

# Requests are used by the Darling Data Managment System to define urls.
# Requests are defined with dsh using urls relative to the App's domain.
# For example if the App's domain is "http://localhost:8080/", then the following dsh call:
#     dsh -- new Request "${app_name}" RequestName RequestContainer "index.php?page=home"
# would define a Request Component for the App whose getUrl() method would return:
#     "http://localhost:8080/index.php?page=home"

# Once a Request is defined, it can be assigned to the appropriate Responses.
# Note: The Responses MUST be defined in Responses.sh or the assigment will fail when
#       dsh --make-app is called to make the App from the App Package.
# To stay organized, assignments SHOULD be defined right after the Request is defined, for example:
#    dsh --new Request "${app_name}" HomepageRequest Requests "index.php?page=home"
#    dsh --assign-to-response "${app_name}" HomepageResponse HomepageRequest Requests Request
#    # Note: The example assignment above assumes a Response name HomepageResponse is defined in the AppPackage's Responses.sh file.

# Note: Assigning a Request to a Response is not required, Requests can be defined without being assinged to a Response, but only at
        the beginning of the development of the App, or in a niche context, would it make sense to define Requests that are not assinged
        to any Responses.

# For help with dsh use `dsh --help`
# For brief help with dsh use `dsh --help flags`

# Additional documentation can be found on GitHub at https://github.com/sevidmusic/DarlingDataManagementSystem

# Example Request:

# dsh --new Request "${app_name}" RequestName RequestContainer "index.php?page=home"

