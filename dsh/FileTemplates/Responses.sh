#!/bin/bash
# APP_NAME | Responses.sh

set -o posix

# This function, determineDirectoryPath is very important, it will insure the App Package's config.sh is located accurately.
# DO NOT REMOVE OR MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING!
determineDirectoryPath() {
    local CURRENT_FILE_PATH CURRENT_DIRECTORY_PATH
    CURRENT_FILE_PATH="${BASH_SOURCE[0]}"
    while [ -h "$CURRENT_FILE_PATH" ]; do # resolve $CURRENT_FILE_PATH until the file is no longer a symlink | -h is true if file exists and is a symlink
      CURRENT_DIRECTORY_PATH="$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
      CURRENT_FILE_PATH="$(readlink "$CURRENT_FILE_PATH")"
      [[ $CURRENT_FILE_PATH != /* ]] && CURRENT_FILE_PATH="$CURRENT_DIRECTORY_PATH/$CURRENT_FILE_PATH" # if $CURRENT_FILE_PATH was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    printf "%s" "$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
}

source "$(determineDirectoryPath)/config.sh"

# This file was generated by dsh.

# Use this file to define the Responses for the App.
# Only Responses, and GlobalResponses should be defined in this file.

# Responses are used by the Darling Data Managment System to determine which
# Output Componetns should load for which Requests.

# GlobalResponses are used by the Darling Data Management System to determine which
# Output Components should load for all Requests.

# For help with dsh use `dsh --help`
# For brief help with dsh use `dsh --help flags`

# Additional documentation can be found on GitHub at https://github.com/sevidmusic/DarlingDataManagementSystem

# Example Response:
# dsh --new Response "${app_name}" ResponseName 0

# Example GlobalResponse:
# dsh --new GlobalResponse "${app_name}" GlobalResponseName 3

