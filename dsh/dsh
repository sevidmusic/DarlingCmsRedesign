#!/bin/bash

set -o posix

clear

setupPaths() {
    # Determine real path to dsh directory
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    PATH_TO_DSH_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
    PATH_TO_DSHUI="${PATH_TO_DSH_DIR}/dshui.sh"
    PATH_TO_DSH_FUNCTIONS="${PATH_TO_DSH_DIR}/dshfunctions.sh"
    PATH_TO_DDMS="${PATH_TO_DSH_DIR/dsh/}"
}

loadLibrary() {
    [[ ! -f "${1}" ]] && printf "\n\n\e[33mError! Failed to load ${1}!\e[0m\n\n" && exit 1
    . "${1}"
}

setupPaths

loadLibrary "${PATH_TO_DSH_FUNCTIONS}"

loadLibrary "${PATH_TO_DSHUI}"

####### Process flags #######
while test $# -gt 0; do
  case "$1" in
  -h | --help)
    shift
    showBanner
    showHelpMsg
    exit 0
    ;;
  -s | --start-app-server*)
    shift
    if [[ -n "${1}" ]]; then
      disableCtrlC
      showLoadingBar "Starting local development server at localhost:${1}"
      startAppServer "${1}"
      enableCtrlC
      exit 0
    fi
    notifyUser "Error! You must specify a port when using the -s flag. For example: ${HIGHLIGHTCOLOR}dsh -s 8888${CLEAR_ALL_TEXT_STYLES}"
    ;;
  -t | --test-ddms*)
    shift
    disableCtrlC
    modifyJsonStorageDir
    runPhpUnit
    restoreJsonStorageDir
    enableCtrlC
    showLoadingBar "All done" 'dontClear'
    ;;
  *)
    notifyUser "${WARNING_COLOR}Invalid flag ${1}"
    break
    ;;
  esac
done

# re-enable ctrl-c
trap 2
