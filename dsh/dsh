#!/bin/bash
# dsh

set -o posix

logErrorMsg() {
    printf "\n\e[43m\e[30m%s\n\e[0m" "${1}" >> /dev/stderr
}

logErrorMsgAndExit1() {
    logErrorMsg "${1}"
    exit 1
}

determineDshDirectoryPath() {
    local CURRENT_FILE_PATH CURRENT_DIRECTORY_PATH
    CURRENT_FILE_PATH="${BASH_SOURCE[0]}"
    while [ -h "$CURRENT_FILE_PATH" ]; do # resolve $CURRENT_FILE_PATH until the file is no longer a symlink | -h is true if file exists and is a symlink
      CURRENT_DIRECTORY_PATH="$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
      CURRENT_FILE_PATH="$(readlink "$CURRENT_FILE_PATH")"
      [[ $CURRENT_FILE_PATH != /* ]] && CURRENT_FILE_PATH="$CURRENT_DIRECTORY_PATH/$CURRENT_FILE_PATH" # if $CURRENT_FILE_PATH was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    printf "%s" "$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
}

loadLibrary() {
    # use of -x instead of -f is intentinal, the file MUST exist and be executable
    # @seehttps://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-Conditional-Expressions
    [[ ! -x "${1}" ]] && logErrorMsg "Error! Failed to load ${1}!" && logErrorMsgAndExit1 "The script either does not exist, or is not executable."
    . ${1} ${2}
}

updateAndShowManPage() {
    local users_man_directory_path users_man1_directory_path help_file_path
    users_man_directory_path="${HOME}/.local/share/man"
    users_man1_directory_path="${users_man_directory_path}/man1"
    help_file_path="$(determineDshDirectoryPath)/helpFiles/man.txt"
    [[ ! -d "${users_man_directory_path}" ]] && mkdir "${users_man_directory_path}"
    [[ ! -d "${users_man1_directory_path}" ]] && mkdir "${users_man1_directory_path}"
    [[ -d "${users_man1_directory_path}" ]] && cp "${help_file_path}" "${users_man1_directory_path}/dsh.1"
    man "${users_man1_directory_path}/dsh.1"
    exit 0
}

showHelpFile() {
    cat "$(determineDshDirectoryPath)/helpFiles/${1}"
    exit 0
}

showHelpInfo() {
    if [[ -z "${1}" ]]; then
        updateAndShowManPage
    fi
    if [[ -z "${1}" || "${1}" == '--help' || "${1}" == '-h' ]]; then
        showHelpFile "help.txt"
    fi
    if [[ "${1}" == "FLAG" ]]; then
        showHelpFile "helpFLAG.txt"
    fi
    if [[ "${1}" == "flags" ]]; then
        showHelpFile "helpFlags.txt"
    fi
    if [[ "${1}" == "--start-development-server" ]] || [[ "${1}" == "-s" ]]; then
        showHelpFile "startDevelopmentServer.txt"
    fi
    if [[ "${1}" == "--build-app" ]] || [[ "${1}" == "-b" ]]; then
        showHelpFile "buildApp.txt"
    fi
    if [[ "${1}" == "--new" && -z "${2}" ]] || [[ "${1}" == "-n" && -z "${2}" ]]; then
        showHelpFile "new.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "App" ]] || [[ "${1}" == "-n" && "${2}" ==  "App" ]]; then
        showHelpFile "newApp.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "OutputComponent" ]] || [[ "${1}" == "-n" && "${2}" ==  "OutputComponent" ]]; then
        showHelpFile "newOutputComponent.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "DynamicOutputComponent" ]] || [[ "${1}" == "-n" && "${2}" ==  "DynamicOutputComponent" ]]; then
        showHelpFile "newDynamicOutputComponent.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "Request" ]] || [[ "${1}" == "-n" && "${2}" ==  "Request" ]]; then
        showHelpFile "newRequest.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "Response" ]] || [[ "${1}" == "-n" && "${2}" ==  "Response" ]]; then
        showHelpFile "newResponse.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "GlobalResponse" ]] || [[ "${1}" == "-n" && "${2}" ==  "GlobalResponse" ]]; then
        showHelpFile "newGlobalResponse.txt"
    fi
    if [[ "${1}" == "--assign-to-response" ]] || [[ "${1}" == "-a" ]]; then
        showHelpFile "assignToResponse.txt"
    fi
    if [[ "${1}" == "--php-unit" ]] || [[ "${1}" == "-p" ]]; then
        showHelpFile "phpUnit.txt"
    fi
    if [[ "${1}" == "--dsh-unit" ]] || [[ "${1}" == "-d" ]]; then
        showHelpFile "dshUnit.txt"
    fi
    logErrorMsgAndExit1 "dsh --help <FLAG> expects a valid dsh flag. Run dsh --help or man dsh for more information on how dsh works."
}

loadLibrary "$(determineDshDirectoryPath | sed 's/\/dsh//g')/dshUI/dshUI" "--theme dsh.sh"

while test $# -gt 0; do
  case "$1" in
  -h | --help)
    shift
    showHelpInfo "${1}" "${2}"
    ;;
  *)
    shift
    logErrorMsgAndExit1 "Invalid flag ${1}"
    ;;
  esac
done

notifyUser "dsh is still under development. It is not ready for use." 0 'dontClear'
