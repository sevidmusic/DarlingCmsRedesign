#!/bin/bash
# dsh

set -o posix

logErrorMsg() {
    printf "\n\e[43m\e[30m%s\n\e[0m" "${1}" >> /dev/stderr
}

logErrorMsgAndExit1() {
    logErrorMsg "${1}"
    exit 1
}

determineDshDirectoryPath() {
    local CURRENT_FILE_PATH CURRENT_DIRECTORY_PATH
    CURRENT_FILE_PATH="${BASH_SOURCE[0]}"
    while [ -h "$CURRENT_FILE_PATH" ]; do # resolve $CURRENT_FILE_PATH until the file is no longer a symlink | -h is true if file exists and is a symlink
      CURRENT_DIRECTORY_PATH="$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
      CURRENT_FILE_PATH="$(readlink "$CURRENT_FILE_PATH")"
      [[ $CURRENT_FILE_PATH != /* ]] && CURRENT_FILE_PATH="$CURRENT_DIRECTORY_PATH/$CURRENT_FILE_PATH" # if $CURRENT_FILE_PATH was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    printf "%s" "$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
}

loadLibrary() {
    # use of -x instead of -f is intentinal, the file MUST exist and be executable
    # @seehttps://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-Conditional-Expressions
    [[ ! -x "${1}" ]] && logErrorMsg "Error! Failed to load ${1}!" && logErrorMsgAndExit1 "The script either does not exist, or is not executable."
    . ${1} ${2}
}

updateAndShowManPage() {
    local users_man_directory_path users_man1_directory_path help_file_path
    users_man_directory_path="${HOME}/.local/share/man"
    users_man1_directory_path="${users_man_directory_path}/man1"
    help_file_path="$(determineDshDirectoryPath)/helpFiles/man.txt"
    [[ ! -d "${users_man_directory_path}" ]] && mkdir "${users_man_directory_path}"
    [[ ! -d "${users_man1_directory_path}" ]] && mkdir "${users_man1_directory_path}"
    [[ -d "${users_man1_directory_path}" ]] && cp "${help_file_path}" "${users_man1_directory_path}/dsh.1"
    man "${users_man1_directory_path}/dsh.1"
    exit 0
}

showHelpFile() {
    local text
    text="$(dshUI -c "$(determineDshDirectoryPath)/helpFiles/${1}" 93 "[<]\b[^>]*[>]" "[[]\b[^]]*[]]" "dsh --.*[^ A-Z]" "dsh -.*[^ A-Z]" "Darling Data Management System" "DDMS" "dshUnit" "dshUI" "http:\/\/localhost:" "8080" "index.php")"
    printf "%s" "${text}"
    exit 0
}

showHelpInfo() {
    if [[ -z "${1}" ]]; then
        updateAndShowManPage
    fi
    if [[ -z "${1}" || "${1}" == '--help' || "${1}" == '-h' ]]; then
        showHelpFile "help.txt"
    fi
    if [[ "${1}" == "FLAG" ]]; then
        showHelpFile "helpFLAG.txt"
    fi
    if [[ "${1}" == "flags" ]]; then
        showHelpFile "helpFlags.txt"
    fi
    if [[ "${1}" == "--start-development-server" ]] || [[ "${1}" == "-s" ]]; then
        showHelpFile "startDevelopmentServer.txt"
    fi
    if [[ "${1}" == "--build-app" ]] || [[ "${1}" == "-b" ]]; then
        showHelpFile "buildApp.txt"
    fi
    if [[ "${1}" == "--new" && -z "${2}" ]] || [[ "${1}" == "-n" && -z "${2}" ]]; then
        showHelpFile "new.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "App" ]] || [[ "${1}" == "-n" && "${2}" ==  "App" ]]; then
        showHelpFile "newApp.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "OutputComponent" ]] || [[ "${1}" == "-n" && "${2}" ==  "OutputComponent" ]]; then
        showHelpFile "newOutputComponent.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "DynamicOutputComponent" ]] || [[ "${1}" == "-n" && "${2}" ==  "DynamicOutputComponent" ]]; then
        showHelpFile "newDynamicOutputComponent.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "Request" ]] || [[ "${1}" == "-n" && "${2}" ==  "Request" ]]; then
        showHelpFile "newRequest.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "Response" ]] || [[ "${1}" == "-n" && "${2}" ==  "Response" ]]; then
        showHelpFile "newResponse.txt"
    fi
    if [[ "${1}" == "--new" && "${2}" == "GlobalResponse" ]] || [[ "${1}" == "-n" && "${2}" ==  "GlobalResponse" ]]; then
        showHelpFile "newGlobalResponse.txt"
    fi
    if [[ "${1}" == "--assign-to-response" ]] || [[ "${1}" == "-a" ]]; then
        showHelpFile "assignToResponse.txt"
    fi
    if [[ "${1}" == "--php-unit" ]] || [[ "${1}" == "-p" ]]; then
        showHelpFile "phpUnit.txt"
    fi
    if [[ "${1}" == "--dsh-unit" ]] || [[ "${1}" == "-d" ]]; then
        showHelpFile "dshUnit.txt"
    fi
    logErrorMsgAndExit1 "dsh --help <FLAG> expects a valid dsh flag. Run dsh --help or man dsh for more information on how dsh works."
}


startDevelopmentServer() {
    showLoadingBar "    Starting development server at http://localhost:${1:-8080}" 'dontClear'
    /usr/bin/php -S "localhost:${1:-8080}" -t "$(determineDshDirectoryPath | sed 's/dsh//g')" &> /dev/null & xdg-open "http://localhost:${1:-8080}" &>/dev/null & disown
    exit 0
}

determineAppDirectoryPath() {
    printf "%s" "$(determineDshDirectoryPath | sed "s/dsh/Apps\/${1}/g")"
}

getAppDomainNameFromComponentsPhp() {
    grep -E "::buildDomain" "$(determineAppDirectoryPath "${1}")/Components.php" | grep -Eo "'.*'" | sed "s/'//g"
}

modifyAppDomain() {
    sed -i "s,$(getAppDomainNameFromComponentsPhp "${1}"),${2},g" "$(determineAppDirectoryPath "${1}")/Components.php"
}

buildApp() {
    local actual_domain
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "dsh --build-app <APP_NAME> <DOMAIN> expects the name of the app be specified as the first parameter."
    [[ ! -d "$(determineAppDirectoryPath "${1}")" ]] && logErrorMsg "The specified App does not exist at $(determineAppDirectoryPath "${1}")" && notifyUser "The following Apps are available:" 0 'dontClear' && printf "\n\e[0m\e[102m\e[30m%s\e[0m\n" "$(ls Apps | sed 's/README.md//g' | column)" && logErrorMsgAndExit1 "Please specify an existing App."
    [[ ! -f "$(determineAppDirectoryPath "${1}")/Components.php" ]] && logErrorMsg "The specified App does not define a Components.php file. It cannot be built with dsh." && logErrorMsgAndExit1 "Please define a Components.php file for the App. Hint: You can always use dsh --new App <APP_NAME> <DOMAIN> to create a new app with the proper structure, and a pre-configured Components.php file. : )"
    actual_domain="$(getAppDomainNameFromComponentsPhp "${1}")"
    # Modify
    current_directory="$(determineDshDirectoryPath | sed 's/dsh//g')"
    [[ -n "${2}" ]] && modifyAppDomain "${1}" "${2}"
    cd "$(determineAppDirectoryPath "${1}")"
    /usr/bin/php ./Components.php
    cd "${current_directory}"
    # Restore
    [[ -n "${2}" ]] && modifyAppDomain "${1}" "${actual_domain}"
    exit 0
}

validateMode() {
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "dsh --new <MODE> <ARGUMENTS>... expects a mode be specified as the first parameter."
    declare -a validModes=( App AppPackage OutputComponent DynamicOutputComponent Request Response GlobalResponse)
    declare -A map
    for key in "${!validModes[@]}"; do map[${validModes[$key]}]="$key"; done
    [[ -z "${map[${1}]}" ]] && logErrorMsg "dsh --new expects a valid mode. The following modes are available:" && logErrorMsg "$(printf '\n\e[0m\e[104m\e[30m%s\e[0m\n' "${validModes[@]}" | column)" && logErrorMsg "For more information about the dsh --new flag, use dsh --help --new" && logErrorMsgAndExit1 "For more information about a specific mode, use dsh --help --new <MODE>"
}

createNewApp() {
      [[ -z "${1}" ]] && logErrorMsg "dsh --new App <APP_NAME> <DOMAIN> expects the new App's name be specified as the first modal argument." && logErrorMsg "For example, to create an app named Foo:" && logErrorMsg "dsh --new App Foo" && logErrorMsgAndExit1 "For more information use dsh --help --new App"
      [[ -d "$(determineAppDirectoryPath "${1}")" ]] && logErrorMsgAndExit1 "An App named ${1} already exists, please specify a unique name for the new App."
      showLoadingBar "Preparing to create the new ${1} app at $(determineAppDirectoryPath "${1}")" 'dontClear'
      showLoadingBar "    Creating App directory at $(determineAppDirectoryPath "${1}")" 'dontClear'
      mkdir "$(determineAppDirectoryPath "${1}")"

      showLoadingBar "    Creating App's OutputComponents directory at $(determineAppDirectoryPath "${1}")/OutputComponents" 'dontClear'
      mkdir "$(determineAppDirectoryPath "${1}")/OutputComponents"

      showLoadingBar "    Creating App's Requests directory at $(determineAppDirectoryPath "${1}")/Requests" 'dontClear'
      mkdir "$(determineAppDirectoryPath "${1}")/Requests"

      showLoadingBar "    Creating App's Responses directory at $(determineAppDirectoryPath "${1}")/Responses" 'dontClear'
      mkdir "$(determineAppDirectoryPath "${1}")/Responses"

      showLoadingBar "    Creating App's DynamicOutput directory at $(determineAppDirectoryPath "${1}")/DynamicOutput" 'dontClear'
      mkdir "$(determineAppDirectoryPath "${1}")/DynamicOutput"

      showLoadingBar "    Creating App's css directory at $(determineAppDirectoryPath "${1}")/css" 'dontClear'
      mkdir "$(determineAppDirectoryPath "${1}")/css"

      showLoadingBar "    Creating App's js directory at $(determineAppDirectoryPath "${1}")/js" 'dontClear'
      mkdir "$(determineAppDirectoryPath "${1}")/js"

      showLoadingBar "    Creating App's Components.php file at $(determineAppDirectoryPath "${1}")/Components.php" 'dontClear'
      cp "$(determineDshDirectoryPath)/FileTemplates/Components.php" "$(determineAppDirectoryPath "${1}")/Components.php"

      notifyUser "The ${1} App was created successfully." 0 'dontClear'
      exit 0
}

createNewOutputComponent() {
    local expectedContent
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "You must specify the name of the App the new OutputComponent will be defined for."
    [[ -z "${2}" ]] && logErrorMsgAndExit1 "You must specify a name to assign to the new OutputComponent."
    [[ -z "${3}" ]] && logErrorMsgAndExit1 "You must specify a container to assign to the new OutputComponent."
    [[ -z "${4}" ]] && logErrorMsgAndExit1 "You must specify a position to assign to the new OutputComponent."
    [[ -z "${5}" ]] && logErrorMsgAndExit1 "You must specify the output to assignt to the new OutputComponent."
    [[ ! -d "$(determineAppDirectoryPath ${1})" ]] && logErrorMsg "The specified App, ${1}, does not exist. Please specify an existing App to define the new OutputComponent for. The following apps are available:" && logErrorMsg "$(ls "$(determineDshDirectoryPath | sed 's/dsh/Apps/g')" | sed 's/README.md//g' | column)" && logErrorMsgAndExit1 "For help use dsh --help --new OutputComponent."
    [[ -f "$(determineAppDirectoryPath ${1})/OutputComponents/${2}.php" ]] && logErrorMsgAndExit1 "An OutputComponent named ${2} is already defined for the App, please specify a unique name to assign to the new OutputComponent."
    notifyUser "Creating new OutputComponent \"${2}\" for the ${1} App:" 0 'dontClear'
    showLoadingBar "    Copying $(determineDshDirectoryPath)/FileTemplates/OutputComponent.php to $(determineAppDirectoryPath "${1}")" 'dontClear'
    cp "$(determineDshDirectoryPath)/FileTemplates/OutputComponent.php" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    showLoadingBar "    Configuring $(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php" 'dontClear'
    sed -i "s/APP_NAME/${1}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    sed -i "s/OUTPUT_COMPONENT_NAME/${2}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    sed -i "s/OUTPUT_COMPONENT_CONTAINER/${3}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    sed -i "s/OUTPUT_COMPONENT_POSITION/${4}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    expectedContent="$(cat "$(determineAppDirectoryPath ${1})/OutputComponents/${2}.php")"
    awk -v output="${5}" -v expectedContent="${expectedContent}" 'BEGIN { gsub( "(\047)", "__ESCAPE__&", output  ); gsub( "__ESCAPE__", "\\", output);  gsub( "OUTPUT", output, expectedContent ); print expectedContent }' > "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    notifyUser "The "${2}" OutputComponent was defined for the ${1} App successfully. It's configuration file can be located at:" 0 'dontClear'
    notifyUser "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php" 0 'dontClear'
    exit 0
}

createNewDynamicOutputComponent() {
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "You must specify the name of the App the new DynamicOutputComponent will be defined for."
    [[ -z "${2}" ]] && logErrorMsgAndExit1 "You must specify a name to assign to the new DynamicOutputComponent."
    [[ -z "${3}" ]] && logErrorMsgAndExit1 "You must specify a container to assign to the new DynamicOutputComponent."
    [[ -z "${4}" ]] && logErrorMsgAndExit1 "You must specify a position to assign to the new DynamicOutputComponent."
    [[ -z "${5}" ]] && logErrorMsgAndExit1 "You must specify the output to assignt to the new DynamicOutputComponent."
    [[ ! -d "$(determineAppDirectoryPath ${1})" ]] && logErrorMsg "The specified App, ${1}, does not exist. Please specify an existing App to define the new DynamicOutputComponent for. The following apps are available:" && logErrorMsg "$(ls "$(determineDshDirectoryPath | sed 's/dsh/Apps/g')" | sed 's/README.md//g' | column)" && logErrorMsgAndExit1 "For help use dsh --help --new DynamicOutputComponent."
    [[ -f "$(determineAppDirectoryPath ${1})/OutputComponents/${2}.php" ]] && logErrorMsgAndExit1 "A DynamicOutputComponent named ${2} is already defined for the App, please specify a unique name to assign to the new DynamicOutputComponent."
    notifyUser "Creating new DynamicOutputComponent \"${2}\" for the ${1} App:" 0 'dontClear'
    showLoadingBar "    Copying $(determineDshDirectoryPath)/FileTemplates/OutputComponent.php to $(determineAppDirectoryPath "${1}")" 'dontClear'
    [[ ! -f "$(determineDshDirectoryPath)/FileTemplates/DynamicOutputComponent.php" ]] && logErrorMsgAndExit1 "The DynamicOutputComponent.php file template does not exist at $(determineDshDirectoryPath)/FileTemplates/DynamicOutputComponent.php!"
    cp "$(determineDshDirectoryPath)/FileTemplates/DynamicOutputComponent.php" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    showLoadingBar "    Configuring $(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php" 'dontClear'
    sed -i "s/APP_NAME/${1}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    sed -i "s/DYNAMIC_OUTPUT_COMPONENT_NAME/${2}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    sed -i "s/DYNAMIC_OUTPUT_COMPONENT_CONTAINER/${3}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    sed -i "s/DYNAMIC_OUTPUT_COMPONENT_POSITION/${4}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    sed -i "s/DYNAMIC_OUTPUT_FILE/${5}/g" "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php"
    notifyUser "The "${2}" OutputComponent was defined for the ${1} App successfully. It's configuration file can be located at:" 0 'dontClear'
    notifyUser "$(determineAppDirectoryPath "${1}")/OutputComponents/${2}.php" 0 'dontClear'
    exit 0
}

createNewRequest() {
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "You must specify the name of the App the new Request will be defined for."
    [[ -z "${2}" ]] && logErrorMsgAndExit1 "You must specify a name to assign to the new Request."
    [[ -z "${3}" ]] && logErrorMsgAndExit1 "You must specify a container to assign to the new Request."
    [[ -z "${4}" ]] && logErrorMsgAndExit1 "You must specify the relative url to assignt to the new Request."
    [[ ! -d "$(determineAppDirectoryPath ${1})" ]] && logErrorMsg "The specified App, ${1}, does not exist. Please specify an existing App to define the new Request for. The following apps are available:" && logErrorMsg "$(ls "$(determineDshDirectoryPath | sed 's/dsh/Apps/g')" | sed 's/README.md//g' | column)" && logErrorMsgAndExit1 "For help use dsh --help --new Request."
    [[ -f "$(determineAppDirectoryPath ${1})/Requests/${2}.php" ]] && logErrorMsgAndExit1 "A Request named ${2} is already defined for the App, please specify a unique name to assign to the new Request."
    notifyUser "Creating new Request \"${2}\" for the ${1} App:" 0 'dontClear'
    showLoadingBar "    Copying $(determineDshDirectoryPath)/FileTemplates/Request.php to $(determineAppDirectoryPath "${1}")" 'dontClear'
    [[ ! -f "$(determineDshDirectoryPath)/FileTemplates/Request.php" ]] && logErrorMsgAndExit1 "The Request.php file template does not exist at $(determineDshDirectoryPath)/FileTemplates/Request.php!"
    cp "$(determineDshDirectoryPath)/FileTemplates/Request.php" "$(determineAppDirectoryPath "${1}")/Requests/${2}.php"
    showLoadingBar "    Configuring $(determineAppDirectoryPath "${1}")/Requests/${2}.php" 'dontClear'
    sed -i "s/APP_NAME/${1}/g" "$(determineAppDirectoryPath "${1}")/Requests/${2}.php"
    sed -i "s/REQUEST_NAME/${2}/g" "$(determineAppDirectoryPath "${1}")/Requests/${2}.php"
    sed -i "s/REQUEST_CONTAINER/${3}/g" "$(determineAppDirectoryPath "${1}")/Requests/${2}.php"
    sed -i "s/RELATIVE_URL/${4}/g" "$(determineAppDirectoryPath "${1}")/Requests/${2}.php"
    sed -i "s/\/\//\//g" "$(determineAppDirectoryPath "${1}")/Requests/${2}.php"
    notifyUser "The "${2}" Request was defined for the ${1} App successfully. It's configuration file can be located at:" 0 'dontClear'
    notifyUser "$(determineAppDirectoryPath "${1}")/Requests/${2}.php" 0 'dontClear'
    exit 0
}

createNewResponse() {
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "You must specify the name of the App the new Response will be defined for."
    [[ -z "${2}" ]] && logErrorMsgAndExit1 "You must specify a name to assign to the new Response."
    [[ -z "${3}" ]] && logErrorMsgAndExit1 "You must specify a position to assign to the new Response."
    [[ ! -d "$(determineAppDirectoryPath ${1})" ]] && logErrorMsg "The specified App, ${1}, does not exist. Please specify an existing App to define the new Response for. The following apps are available:" && logErrorMsg "$(ls "$(determineDshDirectoryPath | sed 's/dsh/Apps/g')" | sed 's/README.md//g' | column)" && logErrorMsgAndExit1 "For help use dsh --help --new Response."
    [[ -f "$(determineAppDirectoryPath ${1})/Responses/${2}.php" ]] && logErrorMsgAndExit1 "A Response named ${2} is already defined for the App, please specify a unique name to assign to the new Response."
    notifyUser "Creating new Response \"${2}\" for the ${1} App:" 0 'dontClear'
    showLoadingBar "    Copying $(determineDshDirectoryPath)/FileTemplates/Response.php to $(determineAppDirectoryPath "${1}")" 'dontClear'
    [[ ! -f "$(determineDshDirectoryPath)/FileTemplates/Response.php" ]] && logErrorMsgAndExit1 "The Response.php file template does not exist at $(determineDshDirectoryPath)/FileTemplates/Response.php!"
    cp "$(determineDshDirectoryPath)/FileTemplates/Response.php" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    showLoadingBar "    Configuring $(determineAppDirectoryPath "${1}")/Responses/${2}.php" 'dontClear'
    sed -i "s/APP_NAME/${1}/g" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    sed -i "s/RESPONSE_NAME/${2}/g" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    sed -i "s/RESPONSE_POSITION/${3}/g" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    notifyUser "The "${2}" Response was defined for the ${1} App successfully. It's configuration file can be located at:" 0 'dontClear'
    notifyUser "$(determineAppDirectoryPath "${1}")/Responses/${2}.php" 0 'dontClear'
    exit 0
}

createNewGlobalResponse() {
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "You must specify the name of the App the new GlobalResponse will be defined for."
    [[ -z "${2}" ]] && logErrorMsgAndExit1 "You must specify a name to assign to the new GlobalResponse."
    [[ -z "${3}" ]] && logErrorMsgAndExit1 "You must specify a position to assign to the new GlobalResponse."
    [[ ! -d "$(determineAppDirectoryPath ${1})" ]] && logErrorMsg "The specified App, ${1}, does not exist. Please specify an existing App to define the new GlobalResponse for. The following apps are available:" && logErrorMsg "$(ls "$(determineDshDirectoryPath | sed 's/dsh/Apps/g')" | sed 's/README.md//g' | column)" && logErrorMsgAndExit1 "For help use dsh --help --new GlobalResponse."
    [[ -f "$(determineAppDirectoryPath ${1})/Responses/${2}.php" ]] && logErrorMsgAndExit1 "A GlobalResponse named ${2} is already defined for the App, please specify a unique name to assign to the new GlobalResponse."
    notifyUser "Creating new GlobalResponse \"${2}\" for the ${1} App:" 0 'dontClear'
    showLoadingBar "    Copying $(determineDshDirectoryPath)/FileTemplates/GlobalResponse.php to $(determineAppDirectoryPath "${1}")" 'dontClear'
    [[ ! -f "$(determineDshDirectoryPath)/FileTemplates/GlobalResponse.php" ]] && logErrorMsgAndExit1 "The GlobalResponse.php file template does not exist at $(determineDshDirectoryPath)/FileTemplates/GlobalResponse.php!"
    cp "$(determineDshDirectoryPath)/FileTemplates/GlobalResponse.php" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    showLoadingBar "    Configuring $(determineAppDirectoryPath "${1}")/Responses/${2}.php" 'dontClear'
    sed -i "s/APP_NAME/${1}/g" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    sed -i "s/GLOBAL_RESPONSE_NAME/${2}/g" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    sed -i "s/GLOBAL_RESPONSE_POSITION/${3}/g" "$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    notifyUser "The "${2}" GlobalResponse was defined for the ${1} App successfully. It's configuration file can be located at:" 0 'dontClear'
    notifyUser "$(determineAppDirectoryPath "${1}")/Responses/${2}.php" 0 'dontClear'
    exit 0
}

configureResponseAssignment() {
    target_response_name="${2}"
    target_response_path="$(determineAppDirectoryPath "${1}")/Responses/${target_response_name}.php"
    component_name="${3}"
    component_container="${4}"
    component_type="${5}"
    sed "s/);/    \$appComponentsFactory->getComponentCrud()->readByNameAndType(@        '${component_name}',@        ${component_type}::class,@        \$appComponentsFactory->getLocation(),@        '${component_container}',@    ),@);/g" "${target_response_path}" | tr '@' '\n'
}

assignToResponse() {
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "dsh --assign-to-response expects the name of the App the target Response is defined for be specified as the first parameter"
    [[ -z "${2}" ]] && logErrorMsgAndExit1 "dsh --assign-to-response expects the name of the Response be specified as the second parameter"
    [[ -z "${3}" ]] && logErrorMsgAndExit1 "dsh --assign-to-response expects the name of the Component to assign to the Response be specified as the third parameter"
    [[ -z "${4}" ]] && logErrorMsgAndExit1 "dsh --assign-to-response expects the Component's container be specified as the fourth parameter"
    [[ -z "${5}" ]] && logErrorMsgAndExit1 "dsh --assign-to-response expects the Component's type be specified as the fith parameter"
    [[ ! -d "$(determineAppDirectoryPath ${1})" ]] && logErrorMsg "The specified App, ${1}, does not exist. Please specify an existing App. The following apps are available:" && logErrorMsg "$(ls "$(determineDshDirectoryPath | sed 's/dsh/Apps/g')" | sed 's/README.md//g' | column)" && logErrorMsgAndExit1 "For help use dsh --help --assign-to-response."
    [[ ! -f "$(determineAppDirectoryPath ${1})/Responses/${2}.php" ]] && logErrorMsg "The specified Response, ${2}, does not exist. Please specify an existing Response. The following Responses are available:" && logErrorMsg "$(ls "$(determineAppDirectoryPath "${1}")/Responses" | sed 's/[.]php//g' | column)" && logErrorMsgAndExit1 "For help use dsh --help --assign-to-response."
    case "${5}" in
    OutputComponent | DynamicOutputComponent)
      [[ ! -f "$(determineAppDirectoryPath ${1})/OutputComponents/${3}.php" ]] && logErrorMsgAndExit1 "The specified ${5}, ${3}, does not exist. For help use dsh --help --assign-to-response."
      break
      ;;
    Request)
      [[ ! -f "$(determineAppDirectoryPath ${1})/Requests/${3}.php" ]] && logErrorMsgAndExit1 "The specified ${5}, ${3}, does not exist. For help use dsh --help --assign-to-response."
      break
      ;;
    *)
      break
      ;;
    esac
    target_response_path="$(determineAppDirectoryPath "${1}")/Responses/${2}.php"
    showLoadingBar "Assigning the ${3} ${5} to the ${2} Response defined for the ${1} App in the ${target_response_path} Response configuration file." 'dontClear'
    printf "%s" "$(configureResponseAssignment "${1}" "${2}" "${3}" "${4}" "${5}")" > "${target_response_path}"
    exit 0
}

createNewAppPackage() {
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "dsh --new AppPackage expects the name of the App be specified as the first parameter. For help please use dsh -n AppPackage"
    [[ -z "${2}" ]] && logErrorMsgAndExit1 "dsh --new AppPackage expects the path to the new App Package be specified as the second parameter. This is the path where the App Pacakage will be created. For help please use dsh -n AppPackage"
    [[ -f "${2}/${1}" ]] && logErrorMsgAndExit1 "An file exists at ${2}/${1}, please specify an available path for the AppPackage. For help please use dsh -n AppPackage"
    [[ -d "${2}/${1}" ]] && logErrorMsgAndExit1 "An directory exists at ${2}/${1}, please specify an available path for the AppPackage. For help please use dsh -n AppPackage"
    mkdir "${2}/${1}"
    mkdir "${2}/${1}/css"
    mkdir "${2}/${1}/js"
    mkdir "${2}/${1}/DynamicOutput"
    cp "$(determineDshDirectoryPath)/FileTemplates/Responses.sh" "${2}/${1}/Responses.sh"
    exit 0
}

loadLibrary "$(determineDshDirectoryPath | sed 's/\/dsh//g')/dshUI/dshUI" "--theme dsh.sh"

while test $# -gt 0; do
  case "${1}" in
  -h | --help)
    shift
    showHelpInfo "${1}" "${2}"
    ;;
  -s | --start-development-server)
    shift
    startDevelopmentServer "${1:-8080}"
    ;;
  -b | --build-app)
    shift
    buildApp "${1}" "${2}"
    ;;
  -n | --new)
    shift
    validateMode "${1}"
    case "${1}" in
    App)
      shift
      createNewApp "${1}" "${2}"
      ;;
    AppPackage)
      shift
      createNewAppPackage "${1}" "${2}" "${3}"
      ;;
    OutputComponent)
      shift
      createNewOutputComponent "${1}" "${2}" "${3}" "${4}" "${5}"
      ;;
    DynamicOutputComponent)
      shift
      createNewDynamicOutputComponent "${1}" "${2}" "${3}" "${4}" "${5}"
      ;;
    Request)
      shift
      createNewRequest "${1}" "${2}" "${3}" "${4}" "${5}"
      ;;
    Response)
      shift
      createNewResponse "${1}" "${2}" "${3}"
      ;;
    GlobalResponse)
      shift
      createNewGlobalResponse "${1}" "${2}" "${3}"
      ;;
    esac
    ;;
  -a | --assign-to-response)
    shift
    assignToResponse "${1}" "${2}" "${3}" "${4}" "${5}"
    ;;
  *)
    shift
    logErrorMsgAndExit1 "Invalid flag ${1}"
    ;;
  esac
done

notifyUser "dsh is still under development. It is not ready for use." 0 'dontClear'

