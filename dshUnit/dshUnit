#!/bin/bash

set -o posix

logErrorMsg() {
    printf "\n\e[43m\e[30m%s\n\e[0m" "${1}" >> /dev/stderr
}

logErrorMsgAndExit1() {
    logErrorMsg "${1}"
    exit 1
}

determineDshUnitDirectoryPath() {
    local CURRENT_FILE_PATH CURRENT_DIRECTORY_PATH
    CURRENT_FILE_PATH="${BASH_SOURCE[0]}"
    while [ -h "$CURRENT_FILE_PATH" ]; do # resolve $CURRENT_FILE_PATH until the file is no longer a symlink | -h is true if file exists and is a symlink
      CURRENT_DIRECTORY_PATH="$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
      CURRENT_FILE_PATH="$(readlink "$CURRENT_FILE_PATH")"
      [[ $CURRENT_FILE_PATH != /* ]] && CURRENT_FILE_PATH="$CURRENT_DIRECTORY_PATH/$CURRENT_FILE_PATH" # if $CURRENT_FILE_PATH was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    printf "%s" "$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
}

loadLibrary() {
    # use of -x instead of -f is intentinal, the file MUST exist and be executable
    # @seehttps://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-Conditional-Expressions
    [[ ! -x "${1}" ]] && logErrorMsg "Error! Failed to load ${1}!" && logErrorMsgAndExit1 "The script either does not exist, or is not executable."
    . ${1} ${2}
}

getSpecifiedTestGroup() {
    TEST_GROUP="${TEST_GROUP:-all}"
    printf "%s" "${TEST_GROUP}"
}

runTests() {
    clear
    PASSING_ASSERTIONS="${PASSING_ASSERTIONS:-0}";
    FAILING_ASSERTIONS="${FAILING_ASSERTIONS:-0}";
    PASSING_TESTS="${PASSING_TESTS:-0}";
    FAILING_TESTS="${FAILING_TESTS:-0}";
    CONFIG_FILE_PATH="${CONFIG_FILE_PATH:-$(determineDshUnitDirectoryPath)/dshUnitConfig.sh}"
    notifyUser "Preparing to run test group ${HIGHLIGHTCOLOR}$(getSpecifiedTestGroup)${NOTIFY_COLOR} defined in the ${CONFIG_FILE_PATH} config file." 0 'dontClear'
    showLoadingBar "One moment please" 'dontClear'
    . "${CONFIG_FILE_PATH}" "${TEST_GROUP}"
    notifyUser "There were ${PASSING_ASSERTIONS} passing assertions." 0 'dontClear'
    notifyUser "There were ${FAILING_ASSERTIONS} failing assertions." 0 'dontClear'
    notifyUser "There were ${PASSING_TESTS} passing tests." 0 'dontClear'
    notifyUser "There were ${FAILING_TESTS} failing tests." 0 'dontClear'
}

increasePassingAssertions() {
    ((PASSING_ASSERTIONS++))
    showAssertionPassedMsg
}

increaseFailedAssertions() {
    ((FAILING_ASSERTIONS++))
    showAssertionFailedMsg
}

increasePassingTests() {
    ((PASSING_TESTS++))
    showTestPassedMsg
}

increaseFailingTests() {
    ((FAILING_TESTS++))
    showTestFailedMsg
}

loadLibrary "$(determineDshUnitDirectoryPath | sed 's/\/dshUnit//g')/dshUI/dshUI" "--theme dshUnit.sh"
loadLibrary "$(determineDshUnitDirectoryPath)/dshUnitUI.sh" "--theme dshUnit.sh"
loadLibrary "$(determineDshUnitDirectoryPath)/dshUnitAssertions.sh" "--theme dshUnit.sh"

while test $# -gt 0; do
  case "$1" in
  -h | --help)
    shift
    printf "\n\n\e[35mdshUnit is a command line unit testing framework.\e[0m" "${1}"
    exit 0
    ;;
  -c | --config*)
    shift
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "You must specify a config file when using the --config flag."
    [[ "${1}" == "-h" ]] && logErrorMsgAndExit1 "-h is not a valid config file name or path"
    [[ "${1}" == "-t" ]] && logErrorMsgAndExit1 "-t is not a valid config file name or path"
    [[ -x "${1}" ]] && CONFIG_FILE_PATH="${1}" && shift && continue
    [[ ! -x "$(determineDshUnitDirectoryPath)/${1}" ]] && logErrorMsgAndExit1 "You must specify a existing executable config file when using the --config flag."
    CONFIG_FILE_PATH="$(determineDshUnitDirectoryPath)/${1}"
    shift && continue
    ;;
  -t | --test-group*)
    shift
    [[ -z "${1}" ]] && logErrorMsgAndExit1 "You must specify a test group when using the --test-group flag."
    [[ "${1}" == "-h" ]] && logErrorMsgAndExit1 "-h is not a valid test group."
    [[ "${1}" == "-c" ]] && logErrorMsgAndExit1 "-c is not a valid test group."
    TEST_GROUP="${1}"
    shift && continue
    ;;
  *)
    shift
    logErrorMsgAndExit1 "Invalid flag ${1}"
    ;;
  esac
done

runTests


