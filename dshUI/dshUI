#!/bin/bash

set -o posix

demoTheme() {
    printf "\n%s%sCLEAR_TEXT_STYLES%s" "$(setTextStyleCode 0)" "${CLEAR_TEXT_STYLES}" "$(setTextStyleCode 0)"
    printf "\n%s%sDIM_TEXT%s" "$(setTextStyleCode 0)" "${DIM_TEXT}" "$(setTextStyleCode 0)"
    printf "\n%s%sBOLD_TEXT%s" "$(setTextStyleCode 0)" "${BOLD_TEXT}" "$(setTextStyleCode 0)"
    printf "\n%s%sUNDERLINED_TEXT%s" "$(setTextStyleCode 0)" "${UNDERLINED_TEXT}" "$(setTextStyleCode 0)"
    printf "\n%s%sBLINKING_TEXT%s" "$(setTextStyleCode 0)" "${BLINKING_TEXT}" "$(setTextStyleCode 0)"
    printf "\n%s%sREVERSE_FGBG%s" "$(setTextStyleCode 0)" "${REVERSE_FGBG}" "$(setTextStyleCode 0)"
    printf "\n%s%sHIDDEN_TEXT%s" "$(setTextStyleCode 0)" "${HIDDEN_TEXT}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_1%s" "$(setTextStyleCode 0)" "${COLOR_1}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_2%s" "$(setTextStyleCode 0)" "${COLOR_2}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_3%s" "$(setTextStyleCode 0)" "${COLOR_3}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_4%s" "$(setTextStyleCode 0)" "${COLOR_4}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_5%s" "$(setTextStyleCode 0)" "${COLOR_5}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_6%s" "$(setTextStyleCode 0)" "${COLOR_6}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_7%s" "$(setTextStyleCode 0)" "${COLOR_7}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_8%s" "$(setTextStyleCode 0)" "${COLOR_8}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_9%s" "$(setTextStyleCode 0)" "${COLOR_9}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_10%s" "$(setTextStyleCode 0)" "${COLOR_10}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_11%s" "$(setTextStyleCode 0)" "${COLOR_11}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_12%s" "$(setTextStyleCode 0)" "${COLOR_12}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_13%s" "$(setTextStyleCode 0)" "${COLOR_13}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_14%s" "$(setTextStyleCode 0)" "${COLOR_14}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_15%s" "$(setTextStyleCode 0)" "${COLOR_15}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_16%s" "$(setTextStyleCode 0)" "${COLOR_16}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_17%s" "$(setTextStyleCode 0)" "${COLOR_17}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_18%s" "$(setTextStyleCode 0)" "${COLOR_18}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_19%s" "$(setTextStyleCode 0)" "${COLOR_19}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_20%s" "$(setTextStyleCode 0)" "${COLOR_20}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_21%s" "$(setTextStyleCode 0)" "${COLOR_21}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_22%s" "$(setTextStyleCode 0)" "${COLOR_22}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_23%s" "$(setTextStyleCode 0)" "${COLOR_23}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_24%s" "$(setTextStyleCode 0)" "${COLOR_24}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_25%s" "$(setTextStyleCode 0)" "${COLOR_25}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_26%s" "$(setTextStyleCode 0)" "${COLOR_26}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_27%s" "$(setTextStyleCode 0)" "${COLOR_27}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_28%s" "$(setTextStyleCode 0)" "${COLOR_28}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_29%s" "$(setTextStyleCode 0)" "${COLOR_29}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_30%s" "$(setTextStyleCode 0)" "${COLOR_30}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_31%s" "$(setTextStyleCode 0)" "${COLOR_31}" "$(setTextStyleCode 0)"
    printf "\n%s%sCOLOR_32%s" "$(setTextStyleCode 0)" "${COLOR_32}" "$(setTextStyleCode 0)"
    printf "\n%s%sHIGHLIGHTCOLOR%s" "$(setTextStyleCode 0)" "${HIGHLIGHTCOLOR}" "$(setTextStyleCode 0)"
    printf "\n%s%sSUCCESS_COLOR%s" "$(setTextStyleCode 0)" "${SUCCESS_COLOR}" "$(setTextStyleCode 0)"
    printf "\n%s%sERROR_COLOR%s" "$(setTextStyleCode 0)" "${ERROR_COLOR}" "$(setTextStyleCode 0)"
    printf "\n%s%sNOTIFY_COLOR%s" "$(setTextStyleCode 0)" "${NOTIFY_COLOR}" "$(setTextStyleCode 0)"
}

setTextStyleCode() {
  printf "\e[%sm" "${1}"
}

logErrorMsg() {
    printf "\n%s%s\n%s" "$(setTextStyleCode 33)" "${1}" "$(setTextStyleCode 0)" >> /dev/stderr
}

logErrorMsgAndExit1() {
    logErrorMsg "${1}"
    exit 1
}

determineCurrentDirectoryPath() {
    local CURRENT_FILE_PATH CURRENT_DIRECTORY_PATH
    CURRENT_FILE_PATH="${BASH_SOURCE[0]}"
    while [ -h "$CURRENT_FILE_PATH" ]; do # resolve $CURRENT_FILE_PATH until the file is no longer a symlink | -h is true if file exists and is a symlink
      CURRENT_DIRECTORY_PATH="$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
      CURRENT_FILE_PATH="$(readlink "$CURRENT_FILE_PATH")"
      [[ $CURRENT_FILE_PATH != /* ]] && CURRENT_FILE_PATH="$CURRENT_DIRECTORY_PATH/$CURRENT_FILE_PATH" # if $CURRENT_FILE_PATH was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    printf "%s" "$(cd -P "$(dirname "$CURRENT_FILE_PATH")" >/dev/null 2>&1 && pwd)"
}

loadLibrary() {
    # use of -x instead of -f is intentinal, the file MUST exist and be executable
    # @seehttps://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-Conditional-Expressions
    [[ ! -x "${1}" ]] && logErrorMsg "Error! Failed to load ${1}!" && logErrorMsgAndExit1 "The script either does not exist, or is not executable."
    . "${1}"
}

logInvalidFlagErrorAndExit1() {
    logErrorMsg "Invalid flag ${1}"
    logErrorMsgAndExit1 "dshUI accepts one flag, --theme, or -t for short. The --theme flag is used to specify an alternative theme file."
}

logMissingFlagArgumentErrorAndExit1() {
    logErrorMsgAndExit1 "You must specify the ${1} when using the ${2} flag"
}

logFileDoesNotExistErrorAndExit1() {
    logErrorMsgAndExit1 "The ${1} file either does not exist, or is not executable."
}

determineThemeFilePath() {
    printf "%s" "$(determineCurrentDirectoryPath)/dshUIThemes/${1}"
}

while test $# -gt 0; do
  case "$1" in
  "$(determineCurrentDirectoryPath)/dshUI")
    # Strangely, when dshUI is sourced from another script with '. ./path/to/dshUI/dshUI',
    # ${1} is set to the path to dshUI, so in this case we need to shift to get the first
    # actual flag passed to the script that loaded dshUI.
    # @todo: Look into this further, at least to understand why this happens.
    shift && continue
    ;;
  -h | --help)
    shift
    printf "\ndshUI is a library that proivdes various functions for generating a themeable UI for command line utilities.\n"
    exit 0
    ;;
  -t | --theme*)
    shift
    [[ -z "${1}" ]] && logMissingFlagArgumentErrorAndExit1 "name of the theme file" "--theme"
    [[ -x "$(determineThemeFilePath "$1")" ]] || logFileDoesNotExistErrorAndExit1 "$(determineThemeFilePath "${1}")"
    DSHUI_THEME="${1}"
    shift && continue
    ;;
  -d | --demo-theme)
    shift
    DEMO_THEME="show"
    continue
    ;;
  *)
    shift
    logInvalidFlagErrorAndExit1 "${1}"
    ;;
  esac
done

[[ -z "${DSHUI_THEME}" ]] && DSHUI_THEME='dshUIDefaultTheme.sh'
# Load specified theme, or default theme if specified theme does not exist or if a theme was not specified.
# @todo Implement --theme flag, and shorthand -t
loadLibrary "$(determineThemeFilePath "${DSHUI_THEME}")"
loadLibrary "$(determineCurrentDirectoryPath)/dshUIFunctions.sh" # MUST be loaded AFTER theme UNLESS you keep initTextStyles()

if [[ "${DEMO_THEME}" == 'show' ]]; then
    showLoadingBar "Loading demo of the ${DSHUI_THEME} theme's colors" 'dontClear'
    demoTheme
    exit 0
fi


