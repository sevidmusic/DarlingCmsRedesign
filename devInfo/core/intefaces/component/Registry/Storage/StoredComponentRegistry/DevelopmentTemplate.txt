*************************************************************************
************************ StoredComponentRegistry ************************
*************************************************************************

Note: All code in this Component develeopment template is psuedo code,
and is meant to serve as a guide, actual implementation will be
different.

*************************************************************************
************************ Notes about this file **************************
*************************************************************************

  Hint: Hints provide psuedo code that is meant to serve as an
        implementation guide.

        Note: Hint numbers correspond pseudo code steps, NOT line numbers.
              They are merely a formatting feature so the following command
              can be run to get a summary of the DevelopmentTemplate:

        grep -E 'tes[t]|[0-9][.]' /path/to/DevelopmentTemplate.txt | sed -e 's/tes[t]/\ntest/g;'

        In general it is important that the formatting of this document
        be consistent so tools like grep|awk|sed can be used to review
        this file.

*************************************************************************
*************************************************************************
*************************************************************************

********************************
********** Properties **********
********************************

*******************************
private $acceptedImplementation
*******************************

testAcceptedImplementationPropertyIsAssingedNamespaceOfADefinedInterfacePostInstantiation(): void

   Tests that the namespace assigned to the acceptedImplementation property on instantiation
   refers to a defined interface.

   Note: Test uses php method interface_exists(), NOT class_exists(), in order to insure namespace
   specifically references an interface.

   Hint:
       1. assertTrue(interface_exists(StoredComponentRegistry->export()['acceptedImplementation']))

testAcceptedImplementationPropertyIsAssignedNamespaceOfADefinedComponentImplmenationPostInstantiation(): void

   Tests that the namespace assigned to the acceptedImplementation property on instantiation
   is literally DCMS\interfaces\component\Component. or implements DCMS\interfaces\component\Component

   Hint:
       1. assertTrue(
       1.     StoredComponentRegistry->export()['acceptedImplementation'] === 'DarlingCms\interfaces\component\Component'
       1.     ||
       1.     in_array(
       1.         'DarlingCms\interfaces\component\Component',
       1.         class_implements(StoredComponentRegistry->export()['acceptedImplementation']),
       1.         true
       1.     )
       1. )

**********************
private $componentCrud
**********************

testComponentCrudPropertyIsAssignedAnInstanceOfAComponentCrudImplementationPostInstantiation(): void

   Tests that the componentCrud property is assigned an instance of a DarlingCms\interfaces\component\Crud\ComponentCrud
   implementation on instnatiation.

   Hint:
       1. assertTrue(
       1.     in_array(
       1.         "DarlingCms\interfaces\component\Crud\ComponentCrud"
       1.         class_implements(StoredComponentRegistry->export()['componentCrud']),
       1.         true
       1.     )
       1. )

*****************
private $registry
*****************

testRegistryPropertyIsSetToAnEmptyArrayPostInstantiation(): void

   Test thtat the registry property is assigned an empty array on
   instantiation.

   Hint:
       1. assertEquals([], StoredComponentRegistry->export()['registry'])

*******
Methods
*******

**********************************
getAcceptedImplementation(): string
**********************************

testGetAcceptedImplementationReturnsSameNamespaceAssignedToAcceptedImplementationPropertyOnInstantiation(): void

   Tests that the namespace returned by getAcceptedImplementation() is identical to the namespace that was
   assigned to the acceptedImplementation property on instantiation.

   Hint:
       1. assert_equals(StoredComponentRegistry->export()['acceptedImplementation'], StoredComponentRegistry->getAcceptedImplementation())


*********************************
getComponentCrud(): ComponentCrud
*********************************

testGetComponentCrudReturnsSameComponentCrudImplementationInstanceAssignedToComponentCrudPropertyOnInstantiation(): void

   Tests that the ComponentCrud implementation instance returned by getComponentCrud() is identical to the ComponentCrud
   implementation instance that was assigned to the componentCrud property on instantiation.

   Hint:
       1. assertEquals(StoredComponentRegistry->export()['componentCrud'], StoredComponentRegistry->getComponentCrud())

********************************************
registerComponent(Component): bool
********************************************

testRegisterComponentDoesNotAddComponentsStorableToRegistryPropertysArrayIfComponentIsAlreadyRegistered(): void

   Tests that registerComponent() does not add the specified Component's Storable to the registry property's
   array if the Component's Storable already exists in the registry property's array.

   Hint:
       1. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry)
       2. StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       3. StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       4. assertEquals(1, count(StoredComponentRegistry->export()['registry']))
       5. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry)

testRegisterComponentDoesNotAddComponentsStorableToRegistryPropertysArrayIfComponentDoesNotExistInStorage(): void

   Tests that registerComponent() does not add the specified Component's Storable to the registry property's
   array if the Component does not exist in storage. A StoredComponentRegistry, as the name implies, MUST
   only reference stored Components.

   Hint:
       1. (TEST) StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       2. (TEST) assertEquals(0, count(StoredComponentRegistry->export()['registry']))
   Hint:
       1. (ABS) Note: When implementing abstraction, implement private isStored() method that verifies the
       1. (ABS) component exists in storage.
       2. (ABS) private function isStored(Component): bool
       2. (ABS) {
       2. (ABS)     return (crud->read(Component) === Component) ? true : false)
       2. (ABS) }

testRegisterComponentDoesNotAddComponentsStorableToRegistryPropertysArrayIfComponentIsNotAnAcceptedImplementation(): void

   Tests that registerComponent() does not add the specified Component's Storable to the registry property's
   array if the Component does not implement that interface indicated by the namespace assigned to the
   acceptedImplementation property.

   Hint:
       1. StoredComponentRegistry->import(['acceptedImplementation' => 'DarlingCms\interfaces\component\Registry\Storage\StoredComponentRegistry'])
       2. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry->export()['componentCrud'])
       3. StoredComponentRegistry->registerComponent(StoredComponentRegistry->export()['componentCrud'])
       4. assertTrue(0, count(StoredComponentRegistry->export()['registry']))
       5. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry->export()['componentCrud'])

testRegisterComponentAddsComponentsStorableToRegistryPropertysArrayIfComponentExistsInStorageAndIsNotAlreadyRegisteredAndIsAnAcceptedImplementation(): void

   Tests that registerComponent adds the specified Component's Storable to the registry property array if ALL of the following statements are TRUE:
   * The Component is not already registered.
   * The Component exists in storage.
   * The component implments the interface indicated by the namespcae assigned to the acceptedImplementation property.

   Hint:
       1. StoredComponentRegistry->import(['acceptedImplementation' => 'DarlingCms\interfaces\component\Registry\Storage\StoredComponentRegistry'])
       2. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry)
       3. StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       4. assertTrue(
       4.     in_array(
       4.         StoredComponentRegistry->export()['storable'],
       4.         StoredComponentRegistry->export()['registry'],
       4.         true
       4.     )
       4. )
       5. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry)

testRegisterComponentReturnsTrueIfComponentWasRegistered(): void

   Tests that registerComponent() returns true if Component's storable was added to registry
   propertys array

   Hint:
       1. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry)
       2. $status = StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       3. if(
       3.     in_array(
       3.         StoredComponentRegistry->export()['storable'],
       3.         StoredComponentRegistry->export()['registry'],
       3.         true
       3.     )
       3. === true)
       3. {
       3.         assertTrue($status)
       3. }
       4. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry)

testRegisterComponentReturnsFalseIfComponentWasNotRegistered(): void

   Tests that registerComponent() returns false if Component's storable was not added to registry
   propertys array.

   Hint:
       1. StoredComponentRegistry->import('acceptedImplementation' => 'DarlingCms\interfaces\component\Crud\ComponentCrud'])
       2. $status = StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       3. if(
       3.     !in_array(
       3.         StoredComponentRegistry->export()['storable'],
       3.         StoredComponentRegistry->export()['registry'],
       3.         true
       3.     )
       3. )
       3. {
       3.         assertFalse($status)
       3. }

***********************************
unRegisterComponent(Storable): bool
***********************************

testUnRegisterComponentRemovesSpecifiedStorableFromRegistryPropertysArray(): void

   Tests that unRegisterComponent() removes the specified Storable from the
   registry propertys array.

   Hint:
       1. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry)
       2. StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       3. StoredComponentRegistry->unRegisterComponent(StoredComponentRegistry)
       4. assertFalse(
       4.     in_array(
       4.         StoredComponentRegistry->export()['storable'],
       4.         StoredComponentRegistry->export()['registry'],
       4.         true
       4.     )
       4. )
       5. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry)
   Hint:
       0. (ABS) array_search() will need to check for Storable in registry, since
       0. (ABS) Components are Storables, the following private method should be used by
       0. (ABS) unRegisterComponent() to differentiate between Components and regular
       0. (ABS) Storables:
       0. (ABS)     storableIsAComponent(Storable):bool
       0. (ABS)     getStorableFromComponent(Component): bool
       1. (ABS) i.e.,
       1. (ABS) unRegisterComponent(Storable): bool
       1. (ABS) {
       1. (ABS)    $storable = ($this->storableIsAComponent(Storable) ? $this->getStorableFromComponent(Storable) : Storable);
       1. (ABS)    if(in_array($storable, $this->registry) { unset($this->registry[array_search($storable)]); }
       1. (ABS)    return !in_array($storable, $this->registry)
       1. (ABS) }

testUnRegisterComponentReturnsTrueIfSpecifiedStorableWasRemovedFromRegistryPropertysArray(): void

   Tests that unRegisterComponent() returns true if specified Storable was removed from registry
   propertys array

   Hint:
       1. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry)
       2. StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       3. $status = StoredComponentRegistry->unRegisterComponent(StoredComponentRegistry)
       4. if(
       4.     !in_array(
       4.         StoredComponentRegistry->export()['storable'],
       4.         StoredComponentRegistry->export()['registry'],
       4.         true
       4.     )
       4. )
       4. {
       4.     assertTrue($status)
       4. }
       5. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry)

testUnRegisterComponentReturnsFalseIfSpecifiedStorableWasNotRemovedFromRegistryPropertysArray(): void

   Tests that unRegisterComponent() returns false if specified Storable was not removed from registry
   propertys array. Note: unRegister() MUST return false if storable was not removed for ANY REASON,
   including if it wasnt removed because it does not exist. To simulate a false return the test
   will attempt to un-register a component that was never registered, and assert that unRegisterComponent()
   returns false.

   Hint:
       1. $status = StoredComponentRegistry->unRegisterComponent(StoredComponentRegistry)
       2. assertTrue($status)

********************************
getRegisteredComponents(): array
********************************
############ HERE ############
testGetRegisteredComponentsReadsAllRegisteredComponentsFromStorageAndReturnsThemInAnArray(): void

   Tests that getRegisteredComponents() reads all registered components from storage into an array.

   Hint: (Note: Hint shows storage/registration of one component, should use at least 2 in actual test)
       1. $this->getStoredComponentRegistry()->export()['componentCrud']->create($this->getStoredComponentRegistry());
       2. $this->getStoredComponentRegistry()->registerComponent($this->getStoredComponentRegistry());
       3. var_dump($this->getStoredComponentRegistry()->export()['componentCrud']->update(
       3.      $this->getStoredComponentRegistry(),
       3.      $this->getStoredComponentRegistry()
       3. ));
       4. $this->assertEquals(
       4.     StoredComponentRegistry
       4.     $this->getRegisteredComponents()[0],
       4. );
       5. $this->getStoredComponentRegistry()->export()['componentCrud']->delete($this->getStoredComponentRegistry());

   Hint:
       1. (ABS) getRegisteredComponents(): array
       1. (ABS) {
       1. (ABS)     $components = [];
       1. (ABS)     foreach($this->registry as $storable) {
       1. (ABS)         array_push($components, $this->crud->read($storable);
       1. (ABS)     }
       1. (ABS)     return $components
       1. (ABS) }

********************
getRegistry(): array
********************

testGetRegistryReturnsArrayAssignedToRegistryProperty(): void

   Tests that getRegistry() returns the array assigned to the registry property array.

   Hint:
       1. assertEquals(
       1.     StoredComponentRegistry->export()['registry'],
       1.     StoredComponentRegistry->getRegistry()
       1. )

*********************
emptyRegistry(): bool
*********************

testEmptyRegistryAssignsAnEmptyArrayToTheRegistryProperty(): void

   Test that emptyRegistry() assigns an empty array to the registry property.

   Hint:
       1. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry)
       2. StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       3. StoredComponentRegistry->emptyRegistry()
       4. assertEquals([], StoredComponentRegistry->export()['registry'])
       5. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry)

*********************
purgeRegistry(): bool
*********************

testPurgeRegistryRemovesAllStroablesThatReferenceComponentsThatNoLongerExistInStorageFromTheRegistryPropertysArray(): void

   Test that purgeRegistry() removes all Storables in the registry property's array that reference Components that no
   longer exist in storage.

   Hint:
       1. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry)
       2. StoredComponentRegistry->export()['componentCrud']->create(StoredComponentRegistry->export()['componentCrud'])
       3. StoredComponentRegistry->registerComponent(StoredComponentRegistry)
       4. StoredComponentRegistry->registerComponent(StoredComponentRegistry->export()['componentCrud'])
       5. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry)
       6. StoredComponentRegistry->purgeRegistry()
       6. assertTrue(
       6.     !in_array(
       6.         StoredComponentRegistry->export()['storable'],
       6.         StoredComponentRegistry->export()['registry']
       6.         true
       6.     )
       6      &&
       6.     in_array(
       6.         StoredComponentRegistry->export()['componentCrud']->export()['storable'],
       6.         StoredComponentRegistry->export()['registry']
       6.         true
       6.     )
       7. StoredComponentRegistry->export()['componentCrud']->delete(StoredComponentRegistry->export()['componentCrud'])



